# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '01.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt5.QtGui import QBrush, QColor, QFont
from PyQt5.QtWidgets import QApplication, QWidget, QCalendarWidget, QHBoxLayout, QVBoxLayout, QDateTimeEdit, QLabel, \
    QMessageBox, QTableWidget, QTableWidgetItem, QAbstractItemView, QHeaderView
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
import export_update_file_list
from PyQt5.QtCore import Qt,QDateTime,QDate,QTime
import memo
class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        #读取备忘录 获取上一次选择的路径



        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(787, 567)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.formwidget = QtWidgets.QWidget(self.centralwidget)
        self.formwidget.setObjectName("formwidget")
        self.source_label = QtWidgets.QLabel(self.formwidget)
        self.source_label.setGeometry(QtCore.QRect(20, 15, 100, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.source_label.setFont(font)
        self.source_label.setObjectName("source_label")
        self.start_time_label = QtWidgets.QLabel(self.formwidget)
        self.start_time_label.setGeometry(QtCore.QRect(20, 85, 54, 12))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.start_time_label.setFont(font)
        self.start_time_label.setObjectName("start_time_label")
        self.target_label = QtWidgets.QLabel(self.formwidget)
        self.target_label.setGeometry(QtCore.QRect(20, 50, 100, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.target_label.setFont(font)
        self.target_label.setObjectName("target_label")
        # 时间组件
        self.start_time = QtWidgets.QDateTimeEdit(self.formwidget)
        self.start_time.setDisplayFormat('yyyy-MM-dd hh:mm:ss')  # 显示样式
        # dt1.setDateTime(QDateTime(2011,4,22,16,33,15))
        # 弹出选择日期窗口
        self.start_time.setCalendarPopup(True)  # 允许弹出时间窗口
        # 常用的三个信号：dateChanged()、dateTimeChanged()、timeChanged()，当日期、日期时间、时间改变时发射。
        #self.start_time.dateTimeChanged.connect(lambda:self.start_time(self.start_time.dateTime().toString()))
        self.start_time.setGeometry(QtCore.QRect(110, 80, 194, 25))
        self.start_time.setObjectName("start_time")

        self.source_file_dir = QtWidgets.QTextEdit(self.formwidget)
        #self.source_file_dir.setEnabled(False)
        self.source_file_dir.setGeometry(QtCore.QRect(110, 10, 400, 25))
        self.source_file_dir.setObjectName("source_file_dir")
        self.target_file_dir = QtWidgets.QTextEdit(self.formwidget)
        #self.target_file_dir.setEnabled(False)
        self.target_file_dir.setGeometry(QtCore.QRect(110, 45, 400, 25))
        self.target_file_dir.setObjectName("target_file_dir")

        self.query_button = QtWidgets.QPushButton(self.formwidget)
        self.query_button.setGeometry(QtCore.QRect(200, 120, 100, 30))
        self.query_button.setObjectName("query_button")

        self.export_button = QtWidgets.QPushButton(self.formwidget)
        self.export_button.setGeometry(QtCore.QRect(350, 120, 100, 30))
        self.export_button.setObjectName("export_button")

        #下一组 按钮
        self.nextPathButton = QtWidgets.QPushButton(self.formwidget)
        self.nextPathButton.setGeometry(QtCore.QRect(500, 120, 100, 30))
        self.nextPathButton.setObjectName("nextPathButton")



        self.sourceButton = QtWidgets.QPushButton(self.formwidget)
        self.sourceButton.setGeometry(QtCore.QRect(520, 10, 75, 23))
        self.sourceButton.setObjectName("sourceButton")
        #打开 源文件目录 窗口
        self.openSourceButton = QtWidgets.QPushButton(self.formwidget)
        self.openSourceButton.setGeometry(QtCore.QRect(610, 10, 75, 23))
        self.openSourceButton.setObjectName("openSourceButton")





        self.targetButton = QtWidgets.QPushButton(self.formwidget)
        self.targetButton.setGeometry(QtCore.QRect(520, 50, 75, 23))
        self.targetButton.setObjectName("targetButton")

        self.openTargetButton = QtWidgets.QPushButton(self.formwidget)
        self.openTargetButton.setGeometry(QtCore.QRect(610, 50, 75, 23))
        self.openTargetButton.setObjectName("openTargetButton")




        self.gridLayout_2.addWidget(self.formwidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 787, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.tablewidget = QTableWidget(self.formwidget)
        ##水平布局
        #实例化表格视图（30*4）
        self.tablewidget.setColumnCount(3)
        self.tablewidget.setHorizontalHeaderLabels(('', '文件路径',''))
        self.tablewidget.setGeometry(QtCore.QRect(0, 170, 760, 350))
        self.tablewidget.setColumnHidden(2, True);

        self.tablewidget.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.tablewidget.setSelectionBehavior(QAbstractItemView.SelectRows)#设置整行选中

        self.tablewidget.setStyleSheet("selection-background-color:grey")
        self.tablewidget.setEditTriggers(QAbstractItemView.NoEditTriggers)#将表格设置为禁止编辑
        #self.tablewidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tablewidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)

        self.check = QtWidgets.QTableWidgetItem()
        self.check.setCheckState(QtCore.Qt.Unchecked)
        #表头样式
        for index in range(self.tablewidget.columnCount()):
            headItem = self.tablewidget.horizontalHeaderItem(index)
            headItem.setFont(QFont("song", 12, QFont.Bold))
            headItem.setForeground(QBrush(Qt.blue))
            headItem.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)


        self.retranslateUi(MainWindow)
        self.loadlastpath()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def cleartable(self):
        rowNum = self.tablewidget.rowCount();
        if rowNum >0:
            for i in list(range(rowNum))[::-1]:
                self.tablewidget.removeRow(i)

    def showtablecontent(self,path_src_web,time_modify):
        self.cleartable()#清空
        file_list = export_update_file_list.get_new_file(path_src_web, time_modify)
        for i in range(len(file_list)):
            self.tablewidget.insertRow(i)  # 插入行
            #复选框
            for j in range(3):
                if j ==0:
                    self.check = QtWidgets.QTableWidgetItem()
                    self.check.setCheckState(QtCore.Qt.Unchecked)
                    itemContent = self.check
                elif(j==1):
                    itemContent = file_list[i].replace(path_src_web,"")
                else:
                    itemContent =file_list[i]
                # 为每个表格内添加数据
                self.tablewidget.setItem(i, j, QTableWidgetItem(itemContent))
        self.msg("查询成功")


    def loadlastpath(self):
        if not memo.readlast(): #不存在记录
            self.source_dir =''
            self.target_dir =''
            self.start_time_ = QDateTime.currentDateTime()
        else :
            memo_ = memo.readlast().split(",")
            self.source_dir = memo_[0]
            self.target_dir = memo_[1]
            self.start_time_ = QDateTime.fromString(memo_[2].replace("\n", ""), "yyyy-MM-dd hh:mm:ss")
        self.source_file_dir.setText(self.source_dir)
        self.target_file_dir.setText(self.target_dir)
        self.start_time.setDateTime(self.start_time_)

    def loadnextpath(self):
        memo_ = memo.next().split(",")
        self.source_dir = memo_[0]
        self.target_dir = memo_[1]
        self.start_time_ = QDateTime.fromString(memo_[2].replace("\n", ""), "yyyy-MM-dd hh:mm:ss")
        self.source_file_dir.setText(self.source_dir)
        self.target_file_dir.setText(self.target_dir)
        self.start_time.setDateTime(self.start_time_)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.source_label.setText(_translate("MainWindow", "源文件目录"))
        self.start_time_label.setText(_translate("MainWindow", "开始时间"))
        self.target_label.setText(_translate("MainWindow", "目标文件目录"))
        self.export_button.setText(_translate("MainWindow", "源->目标"))
        self.export_button.clicked.connect(self.copy_source_to_target)
        self.export_button.setToolTip("将表格中选中的文件列表同步到目标同级目录下")
        self.query_button.setText(_translate("MainWindow", "查询"))
        self.query_button.clicked.connect(self.queryFileList)
        self.query_button.setToolTip("检索源目录下文件更新时间大于开始时间的文件列表")
        self.sourceButton.setText(_translate("MainWindow", "浏览"))
        self.sourceButton.clicked.connect(lambda:self.setBrowerPath(self.sourceButton))
        self.sourceButton.setToolTip("选择源文件目录路径")

        self.targetButton.setText(_translate("MainWindow", "浏览"))
        self.targetButton.clicked.connect(lambda:self.setBrowerPath(self.targetButton))
        self.targetButton.setToolTip("选择目标文件目录路径")

        self.openSourceButton.setText(_translate("MainWindow", "打开"))
        self.openSourceButton.clicked.connect(lambda:self.openwindow(self.source_file_dir.toPlainText()))
        self.openSourceButton.setToolTip("打开源文件目录路径windows窗口")

        self.openTargetButton.setText(_translate("MainWindow", "打开"))
        self.openTargetButton.clicked.connect(lambda:self.openwindow(self.target_file_dir.toPlainText()))
        self.openTargetButton.setToolTip("打开目标文件目录路径windows窗口")

        self.nextPathButton.setText(_translate("MainWindow", "换一组"))
        self.nextPathButton.clicked.connect(self.loadnextpath)
        self.nextPathButton.setToolTip("切换历史查询条件")


    def openwindow(self,path):
        dos_command = "start "+path
        os.system(dos_command)


    def copy_source_to_target(self):
        self.source_dir = self.source_file_dir.toPlainText()
        self.target_dir = self.target_file_dir.toPlainText()
        if not self.target_dir:
            self.msg("目标文件目录不能为空！")
            return False
        if not self.source_dir:
            self.msg("源文件目录不能为空！")
            return False
        target_tail = self.target_dir.split("/")[-1]
        source_tail = self.source_dir.split("/")[-1]
        if target_tail != source_tail:
            self.msg("目标文件目录选择的文件夹名称要与源文件目录的文件夹名称一致！")
            return False
        select_file_list = set()
        for r in range(self.tablewidget.rowCount()):
             item = self.tablewidget.item(r,0)
             if item.checkState():
                 select_file_list.add(self.tablewidget.item(r,2).text())

        export_update_file_list.copy_source_to_target(self.source_dir,self.target_dir,select_file_list)
        self.msg("操作成功，请前往"+self.target_dir+"核对结果")

    def msg(self,message):
        # 使用infomation信息框
        reply = QMessageBox.information(self, "提示",
                                        message)
    def queryFileList(self):
        if (not len(self.source_file_dir.toPlainText())) or (not self.target_file_dir.toPlainText())\
                or not self.start_time.dateTime().toString("yyyy-MM-dd hh:mm:ss"):
            self.msg("目标文件目录,源文件目录，开始时间都不能为空！")
            return False

        if self.start_time.dateTime() > QDateTime.currentDateTime():
            self.msg("开始时间大于当前时间！")
            return False
        content = '{},{},{}'.format(self.source_file_dir.toPlainText(),
                                     self.target_file_dir.toPlainText()
                                    ,self.start_time.dateTime().toString("yyyy-MM-dd hh:mm:ss"))

        memo.wmemo(content)
        self.showtablecontent(self.source_file_dir.toPlainText(),
                              self.start_time.dateTime().toString("yyyy-MM-dd hh:mm:ss"))
    #打开文件浏览，设置路径
    def setBrowerPath(self,button):
        dir_path = QtWidgets.QFileDialog.getExistingDirectory(self,"浏览","C:\\")
        if (not dir_path) and (not self.source_file_dir.toPlainText()):
            target_tail = dir_path.split("/")[-1]
            source_tail = self.source_file_dir.toPlainText().split("/")[-1]
            if target_tail != source_tail:
                self.msg("目标文件目录选择的文件夹名称要与源文件目录的文件夹名称一致！")
                return False

        if button == self.sourceButton:
            self.source_file_dir.setText(dir_path)
        if button == self.targetButton :
            self.target_file_dir.setText(dir_path)






def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)  #实例化QApplication 类 作为GUI主程序的入口
    MainWindow = QtWidgets.QMainWindow()    #创建MainWindow
    ui = Ui_MainWindow()                    #创建实例UI类
    ui.setupUi(MainWindow)                  #设置窗体UI
    # 设置窗口图标
    icon = QtGui.QIcon()
    icon.addPixmap(QtGui.QPixmap("quickcopy.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
    ui.setWindowIcon(icon)
    MainWindow.show()                       #显示窗体
    sys.exit(app.exec_())                   #当窗口创建完成， 要结束主循环过程
if __name__ == "__main__":
    show_MainWindow()
